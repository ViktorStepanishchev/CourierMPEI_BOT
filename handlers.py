from aiogram.types import CallbackQuery, Message
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import base
from base import ff, order_base

import keyboard, text
import back
from states import all_state

router = Router()

@router.message(Command("start")) # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
async def start(message:Message):
    await message.answer(text.start_text, reply_markup=keyboard.main_keyboard)
@router.callback_query(F.data == 'order') # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
async def order(clbck: CallbackQuery, state: FSMContext):
    ff.execute(f"SELECT id FROM orders WHERE id = ?", (clbck.from_user.id,))
    if ff.fetchone() is None:
        await state.set_state(all_state.wait_message_order)
        await clbck.message.edit_text(text.order_text, reply_markup=keyboard.back_keyboard)
    else:
        await clbck.message.edit_text(text.order_is_get_text, reply_markup=keyboard.del_keyboard)

@router.message(all_state.wait_message_order) # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def get_order(message: Message, state: FSMContext):
    await state.update_data(wait_message_order = message.text)
    ff.execute(f"SELECT id FROM orders WHERE id = ?", (message.from_user.id,))
    num_now_order = back.prov(back.all_id_orders)
    ff.execute(f"INSERT INTO orders VALUES (?, ?, ?, ?)", (num_now_order, message.text, message.from_user.id, "–°–í–û–ë–û–î–ï–ù"))
    order_base.commit()
    keyboard.add_inline_order_for_courier()
    await message.chat.delete_message(message_id=message.message_id - 1)
    await message.chat.delete_message(message_id=message.message_id - 2)
    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ #{num_now_order}"+text.get_order_text, reply_markup=keyboard.back_keyboard)
    base.output_base()
    await state.clear()

@router.callback_query(F.data == 'courier') #–ö–Ω–æ–ø–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º)
async def courier(clbck: CallbackQuery):
    await clbck.message.edit_text(text.courier_text, reply_markup=keyboard.order_keyboard.as_markup())

@router.callback_query(F.data == 'help') #–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
async def help(clbck: CallbackQuery):
    await clbck.message.edit_text(text.help_text, reply_markup=keyboard.help_keyboard)

@router.callback_query(F.data == 'back') #–ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
async def back_button(clbck: CallbackQuery):
    await clbck.message.edit_text(text.start_text, reply_markup=keyboard.main_keyboard)

@router.callback_query(F.data == "my_order") #–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async def my_order(clbck: CallbackQuery):
    ff.execute(f"SELECT orderr FROM orders WHERE id = (?)", (clbck.from_user.id,))
    if ff.fetchone() is None:
        await clbck.message.edit_text("–¢—É—Ç –ø—É—Å—Ç–æ üò∂", reply_markup=keyboard.back_keyboard)
    else:
        num_of_order = ff.execute(f"SELECT num FROM orders WHERE id = (?)", (clbck.from_user.id,)).fetchone()[0]
        descript_of_order = ff.execute(f"SELECT orderr FROM orders WHERE id = (?)", (clbck.from_user.id,)).fetchone()[0]
        await clbck.message.edit_text(f"""

        –í–∞—à –∑–∞–∫–∞–∑ #{num_of_order}

        ===–û–ü–ò–°–ê–ù–ò–ï===

        {descript_of_order}

        ==============

        """, reply_markup=keyboard.back_keyboard)

@router.callback_query(F.data == 'red_order') #–ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
async def redaction(clbck: CallbackQuery):
    await clbck.message.edit_text("–î–∞–≤–∞–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ —Ç—ã –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª! –ü—Ä–æ—Å—Ç–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å —É–∂–µ —É—Å—Ç–∞–ª –≤ 1:30 –ø–æ –ú–°–ö –ø–∏—Å–∞—Ç—å –º–Ω–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã üòáüòáüòá", reply_markup=keyboard.back_keyboard)
@router.callback_query(F.data.startswith("")) #–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∫—É—Ä—å–µ—Ä)
async def all_orders(clbck: CallbackQuery):
    order_descrip = list(ff.execute(f"SELECT orderr FROM orders WHERE num = (?)", (clbck.data,)).fetchone())[0]
    await clbck.message.edit_text(f"""
    
–ó–∞–∫–∞–∑ #{clbck.data}

===–û–ü–ò–°–ê–ù–ò–ï===

{order_descrip}

==============

""", reply_markup=keyboard.back_to_orders_keyboard)

@router.message() #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def start(message:Message):
    await message.answer(text.start_text, reply_markup=keyboard.main_keyboard)