from aiogram.types import CallbackQuery, Message
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import base

import keyboard, text
import back
from states import all_state

router = Router()


@router.message(Command("start")) # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
async def start(message: Message):
    username = message.from_user
    if username is None:
        await message.answer(text.no_username, reply_markup=keyboard.back_keyboard)
    else:
        await message.answer(text.start_text, reply_markup=keyboard.main_keyboard)


@router.callback_query(F.data == 'order') # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
async def order(clbck: CallbackQuery, state: FSMContext):
    if base.check_user_in_db(clbck.from_user.id):
        await state.set_state(all_state.wait_message_order)
        await clbck.message.edit_text(text.order_text, reply_markup=keyboard.back_keyboard)
    else:
        await clbck.message.edit_text(text.order_is_get_text, reply_markup=keyboard.del_keyboard)


@router.message(all_state.wait_message_order) # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def get_order(message: Message, state: FSMContext):
    if message.text == None:
        await message.answer(text.error_order_None_text, reply_markup=keyboard.back_keyboard)
    else:
        await state.update_data(wait_message_order = message.text)
        num_now_order = back.prov(back.all_id_orders)
        base.add_user(message.text, message.from_user.id, num_now_order)
        keyboard.add_inline_order_for_courier()
        await message.chat.delete_message(message_id=message.message_id - 1)
        await message.chat.delete_message(message_id=message.message_id - 2)
        await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ #{num_now_order}"+text.get_order_text, reply_markup=keyboard.back_keyboard)
        base.output_base()
        await state.clear()


@router.callback_query(F.data == 'courier') #–ö–Ω–æ–ø–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º)
async def courier(clbck: CallbackQuery):
    await clbck.message.edit_text(text.courier_text, reply_markup=keyboard.order_keyboard)


@router.callback_query(F.data == 'help') #–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
async def help(clbck: CallbackQuery):
    await clbck.message.edit_text(text.help_text, reply_markup=keyboard.help_keyboard)


@router.callback_query(F.data == 'back') #–ö–Ω–æ–ø–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
async def back_button(clbck: CallbackQuery):
    await clbck.message.edit_text(text.start_text, reply_markup=keyboard.main_keyboard)


@router.callback_query(F.data == "my_order") #–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async def my_order(clbck: CallbackQuery):
    if base.check_user_in_db(clbck.from_user.id):
        await clbck.message.edit_text("–ó–¥–µ—Å—å –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ üò∂", reply_markup=keyboard.back_keyboard)
    else:
        num_of_order = base.take_value_from_db("num", "id", clbck.from_user.id)
        descript_of_order = base.take_value_from_db("orderr", "id", clbck.from_user.id)
        await clbck.message.edit_text(f"""

        –í–∞—à –∑–∞–∫–∞–∑ #{num_of_order}

        ===–û–ü–ò–°–ê–ù–ò–ï===

        {descript_of_order}

        ==============

        """, reply_markup=keyboard.del_keyboard)


@router.callback_query(F.data == 'delete_order') #–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞
async def delete_order(clbck: CallbackQuery):
    keyboard.delete_inline_order_for_courier(base.take_value_from_db("num_iterat", "id", clbck.from_user.id))
    base.delete_user(clbck.from_user.id)
    await clbck.message.edit_text(text.delete_order_text, reply_markup=keyboard.after_del_keyboard)


# @router.callback_query(F.data == 'get_order_clbck') #–ö–Ω–æ–ø–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
# async def get_current_order(clbck: CallbackQuery):
#     ff.execute(f"UPDATE orders SET state_orderr = (?) WHERE id = (?)", ("–ó–ê–ù–Ø–¢", clbck.from_user.id))
#     order_base.commit()
#     base.output_base()
#     await clbck.message.edit_text("–í—ã —Ç–∏–ø–æ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ (—è –µ—â—ë –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ, –ø–æ—ç—Ç–æ–º—É —è –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)", reply_markup=keyboard.back_keyboard)


@router.callback_query(F.data.startswith("")) #–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∫—É—Ä—å–µ—Ä)
async def all_orders(clbck: CallbackQuery):
    order_descrip = base.take_value_from_db("orderr", "num", clbck.data)
    await clbck.message.edit_text(f"""
    
–ó–∞–∫–∞–∑ #{clbck.data}

===–û–ü–ò–°–ê–ù–ò–ï===

{order_descrip}

==============

""", reply_markup=keyboard.get_order_keyboard)


@router.message() #–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def start(message:Message):
    await message.answer(text.start_text, reply_markup=keyboard.main_keyboard)